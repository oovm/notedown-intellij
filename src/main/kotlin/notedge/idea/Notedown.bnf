{
    parserClass = "notedge.idea.language.parser.NoteParser"
    parserUtilClass = "notedge.idea.language.psi.NoteParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Note"
    psiImplClassSuffix = "Node"
    psiPackage = "notedge.idea.language.psi"
    psiImplPackage = "notedge.idea.language.psi_node"

    elementTypeHolderClass = "notedge.idea.language.psi.NoteTypes"
    elementTypeClass = "notedge.idea.language.psi.NoteElementType"
    tokenTypeClass = "notedge.idea.language.psi.NoteTokenType"

    psiImplUtilClass = "notedge.idea.language.ast.NoteASTExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = 'regexp:(///)[^\r\n]*'
        COMMENT = 'regexp:(//)[^\r\n]*'
        COMMENT_BLOCK = 'regexp:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]'

        // literal
        URL = 'regexp: [A-Za-z0-9]+://[\-\p{XID_Continue}./?&#]+'
        SYMBOL = 'regexp:[\p{XID_Start}_][\p{XID_Continue}_]*'
        STRING = 'regexp:"([^"\\]|\\.)*"'

        BYTE = 'regexp:(0[bBoOxXfF][0-9A-Fa-f][0-9A-Fa-f_]*)'
        INTEGER = 'regexp:(0|[1-9][0-9_]*)'
        DECIMAL = 'regexp:([0-9]+\.[0-9]*([*][*][0-9]+)?)|(\.[0-9]+([Ee][0-9]+)?)'
        SIGN = 'regexp:[+-]'

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'
    ]
}

NOTE ::= statement*;

private statement ::=
    schema_statement
  | properties_statement
  | def_statement
  | COMMENT_DOCUMENT
  | object
  | ignore;
private ignore ::= SEMICOLON | COMMA;
// ---------------------------------------------------------------------------------------------------------------------
// schema <ID>: <TYPE> { }
// ---------------------------------------------------------------------------------------------------------------------
// parenthesis ( )
private meta parenthesis ::= PARENTHESIS_L <<param>> PARENTHESIS_R;
// bracket [ ]
meta bracket_block ::= BRACKET_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACKET_R;
// brace { }
meta brace_block ::=BRACE_L (<<item>>|<<sp>>)* BRACE_R;

