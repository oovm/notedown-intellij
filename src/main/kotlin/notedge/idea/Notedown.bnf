{
    parserClass = "notedge.idea.language.parser.NoteParser"
    parserUtilClass = "notedge.idea.language.ast.ParserExtension"

    extends = "notedge.idea.language.ast.NotedownNodeBase"

    psiClassPrefix = "Note"
    psiImplClassSuffix = "Node"
    psiPackage = "notedge.idea.language.psi"
    psiImplPackage = "notedge.idea.language.psi_node"
    psiImplUtilClass = "notedge.idea.language.ast.NodeExtension"

    elementTypeHolderClass = "notedge.idea.language.psi.NoteTypes"
    elementTypeClass = "notedge.idea.language.psi.NElementType"
    tokenTypeClass = "notedge.idea.language.psi.NoteTokenType"
    tokens = [
        // literal
        ESCAPED_CHARACTER = '\'
        ITALIC_L = 'ItalicLeft'
        ITALIC_R = 'ItalicRight'
        BOLD_L = 'BoldLeft'
        BOLD_R = 'BoldRight'
        ITALIC_BOLD_L = 'ItalicBoldLeft'
        ITALIC_BOLD_R = 'ItalicBoldRight'

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
    ]
}

Notedown ::= statement*;

private statement ::=
    function_call
  | italic
  ;
private ignore ::= SEMICOLON | COMMA;
// ---------------------------------------------------------------------------------------------------------------------
function_call ::= FUNCTION_ID {

}
italic ::= ITALIC_L TEXT ITALIC_R
identifier ::= SYMBOL
escaped ::= ESCAPED_CHARACTER
// ---------------------------------------------------------------------------------------------------------------------
// parenthesis ( )
private meta parenthesis ::= PARENTHESIS_L <<param>> PARENTHESIS_R;
// bracket [ ]
meta bracket_block ::= BRACKET_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACKET_R;
// brace { }
meta brace_block ::=BRACE_L (<<item>>|<<sp>>)* BRACE_R;

