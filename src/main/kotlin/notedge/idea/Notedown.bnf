{
    parserClass = "notedge.idea.language.parser.NoteParser"
    parserUtilClass = "notedge.idea.language.ast.ParserExtension"

    extends = "notedge.idea.language.ast.NotedownNodeBase"

    psiClassPrefix = "Note"
    psiImplClassSuffix = "Node"
    psiPackage = "notedge.idea.language.psi"
    psiImplPackage = "notedge.idea.language.psi_node"
    psiImplUtilClass = "notedge.idea.language.ast.NodeExtension"

    elementTypeHolderClass = "notedge.idea.language.psi.NoteTypes"
    elementTypeClass = "notedge.idea.language.psi.NElementType"
    tokenTypeClass = "notedge.idea.language.psi.NElementType"
    tokens = [
        // literal
        ESCAPE = '\\'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
    ]
}

Notedown ::= statement*;

private statement ::=
    header
  | function
  | italic
  | xml
  | TEXT
  ;
private ignore ::= SEMICOLON | COMMA;
// ---------------------------------------------------------------------------------------------------------------------
header ::= HEADER_HASH TEXT {

}

italic ::= ITALIC_L TEXT ITALIC_R
identifier ::= SYMBOL
namespace ::= identifier (DOT identifier)*
escaped ::= ESCAPED_CHARACTER
// ---------------------------------------------------------------------------------------------------------------------
// \name.space
function ::= ESCAPE namespace {

}
// ---------------------------------------------------------------------------------------------------------------------
xml ::= xml_close | xml_start xml_end
// <name.space arg kw=arg/>
xml_close ::= ANGLE_L namespace ANGLE_SR
// <name.space arg kw=arg>
xml_start ::= ANGLE_L namespace ANGLE_R
// </name.space>
xml_end ::= ANGLE_SL namespace ANGLE_R
// ---------------------------------------------------------------------------------------------------------------------
// parenthesis ( )
private meta parenthesis ::= PARENTHESIS_L <<param>> PARENTHESIS_R;
// bracket [ ]
meta bracket_block ::= BRACKET_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACKET_R;
// brace { }
meta brace_block ::=BRACE_L (<<item>>|<<sp>>)* BRACE_R;

